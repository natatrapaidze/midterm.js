/*  1 . რა არის ცვლადი (variable)?

ცვლადი არის კონტეინერი სადაც შეგვიძლია შევინახოთ რაიმე მონაცემი 
ანუ რაიმე მნიშვნელობა  ნებისმიერი სახის ( სახელი , გვარი , ასაკი , ქვეყანა ...)  
.ცვლადს შეგვიძლია დავარქვათ ის სახელი რაც ჩვენ მოგვესურვება მაგრამ 
 უმჯობესია ცვლადის სახელი იყოს ამ ცვლადში შენახული მონაცემის შესაბამისი .


	1. ცვლადი ინახავს მნიშვნელობას .
	2. მის გამოსაცხადებლად გვჭირდება  საკვანძო სიტყვები   var , let , const.
	3. მინიჭების ოპერატორით ანუ ტოლობით ცვლადს ვანიჭებთ მნიშვნელობას .
	4. Const  მუდმივი უცვლელი ცვლადია .*/
  
  //მაგ:

let  firstName = "nata"
console.log(firstName)

/*ამ მაგალითში let არის საკვანძო სიტყვა.  ხოლო ცვლადი ანუ კონტეინერი არის firstName  
 მინიჭების ოპერატორის რაც ამ შემთხვევაში გამოიხატება ტოლობით  =   ვანჭებთ მნიშვნელობას , 
 მნიშვნელობა ამ მაგალითში არის nata ანუ ცვლადმა firstName  
 შეინა ხა მნიშვნელობა (მიანიჭა მნიშვნელობა ) 
 nata .*/



/* fiestName  არის ცვლადი , კონტეინერი, ყუთი  */ 






/*  2 . რა არის მინიჭების ოპერატორი (assignment operator)?


js ში  მინიჭების ოპერატორი არის = ტოლობის ნიშანი , ხოლო ტოლობა როგორც თავისივე  მნიშვნელობა
js ში გამოიყენება ორის სახით == ჩვეულებრივი ტოლობა და === მკაცრი ტოლობა
 (უმჯიობესია გამოვიყენოთ მკაცრი ტოლობა)
/*





/*  3 . რა არის მნიშვნელობა (value)?


/*







/* 4 . რას ეწოდება კოდის ბლოკი (code block)?

ჯავასკრიპტში კოდის ბლოკი განისაზღვრება ფიგურული ბრჩხილებით   
{  მასში მოქცეულია ჩვენს მიერ გაკეთებული განცხადება განცხადებები }  
კოდის ბლოკში ჩვენ შეგვიძლია მოვაქციოთ  რამდენიმე განცხადება*/

//console.log(){
   // 1 gancxadeba
   // 2 gancxadeba
//}
 /*სადაც ეს ორი განცხადებაა მოქცეული ფიგურული პრცხილების შორის მას ეწოდება კოდის ბლოკი/*
 
  




 / 5 რა არის [if | else | else if]? /
 

  თვითონს if განისაზღვრება როგორც სიტყვა "თუ " ის js ში განისაზღვრება როგორც "თუ" პირობა 
  შესრულდება ( პორობა if ის შემთხვევაში იწერება კოდის ბლოკში {  } )
 */
  //if 
let age = 27
let fiestName= "doi"

if (age >= 18 & fiestName === "doi"){
    console.log('hello doi')
}

//else
/*ელს მოქმედებს მაშინ თუ ზემოთ მოცემული პირობა if ის შემთხვევაში არ შესრულდება   ანუ თუ if ის
 კოდის ბლოკში მოთავსებული პირობა არ შესრულდება მაში შესრულდეს else ის კოდის ბლოში მოთავსებული პირობა .

მაგ 

let age = 27
let fiestName= "doi"
if (age >= 18 & fiestName === "dol"){
    console.log('hello doi')
} else {
    console.log("hello zvio")
}


ამ მაგალითის მიხედვით იფის კოდის ბლოკში მოთავსებული პირობა არ შესრულდა რადგან firstName 
 რეალურად არის doi ხოლო კოდის ბლოკშკი არის დოლ და რადგანაც არ შესრულდა იფი დაა else ნიშნავს იმას რომ, 
 თუ if არ შესრულდებოდა შესრულებულიყო ელსის პირობა ამიტომ კონსოლ ლოგსი გამოვა hello zvio.
Else ის შემთხვევაში არ ვქმნით ახალ პირობას ისს მხოლოდ რეაგირებს ძველი პირობის არ შესრულების შემთხვევაში. 


*/

//else if 
/*Else if  გამოიყენებაა ახალიი პირიბისს დასადასტურებლად და მისი გამოყენებითვის ჩვენ უნდა
 შეევქმნათ ახალი პირიბა განსხვავებით ელსისგან სადაც არ ვქმნითახალ პირობას .

მაგ 

let age = 27
let fiestName= "doi"
if (age >= 18 & fiestName === "dol"){
    console.log('hello doi')
} else if (age < 30 & fiestName === "doi"){
    console.log("yes")
} else {
    console.log("no")
}

 ამ შემთხვევაში როცა არ დადასტურდა if ის კოდის ბლოკში არსებული პირობა js 
 განაგრძობს კოდის წაკითხვას და else if ში არსებული პირობა დადასტურდება რადგან ასაკი ნამდვილად ნაკლებია 30 ზე 
  რადგან ცვლადში ასაკი მითითებული გვაქვს 27 ხოლო სახელი ცვლადში მითითებული გვაქვს დოი და else if ის ბლოკშიც სახელი დოია  
  ამიტომ ეს პირობაა ჭეშმარიტია დაა კონსოლში მივიღებთ პასუხს yes , მაგრამ თუ არც if ის პირობა და არც else if 
  ის პირობა არ შესრულდებოდა ამ მაგალითში აუცილებლად შესრულდებოდა else პირობა და კონსოლსი მივიღებთით No პრინტს  .

*/





// 6 როგორ მუშაობს: [და, ან, არა] ოპერატორები (and, or, not)?/


//and ოპერატორი 

/*და ოპერატორი js ში გამოისახება &&  
და ოპერატორი აკავშირებს ორ პირობას  და ეს პირობები შესრულდება იმ შემთხვასი თუ დათი 
დაკავიშირებული ორივე მხარე ჭეშმარიტია თუ ერთერთი მხარე მცდარია პირობა არ შესრულდება აუცილებელიაა 
დას შემთხვევაში ორივე მხარე ჭეშმარიტი იყოს .


მაგ 

let sunnyMorning = true
let rainingDay = true
let windyDay = false
console.log (sunnyMorning && rainingDay)

ამ შემთხვევაში კონსოლში გამოცხადებული პირობა იქნება ჭეშმარითი ანუ true რადგან  ორივე ცვლადი ჭეშმარიტია .
  თუ მაგალითად კონსოლსი გამოვაცხადებდით სამივე ცვლადს 

console.log (sunnyMorning && rainingDay && windyDay)  მაშინ პირიბა იქნებოდა false რადგან 
მცდარი რადგან პირველი ორი ცვლადი ჭეშმარიტია მესამე კი მცდარი */


//or ოპერატორი 



/*ან ოპერატორის შემთხვევაშ კონსოლში გამოცხადებული პირობებიდან
 ან ერთი უნდა იყოს ჭესმარიტი ან მორე ან მესამე ...  

მაგ 
let sunnyMorning = true
let rainingDay = true
let windyDay = false
console.log (sunnyMorning || rainingDay || windyDay)

ამ შემთხვევაში პირობაა იქნება true რადგან ერთ-რთი პირობა ჭეშმარიტია*/


//not - ოპერატორი





/*let sunnyMorning = true
let rainingDay = true
let windyDay = false

console.log(sunnyMorning && rainingDay)


არა ოპერატორი js ში გამოიხატება !
თუ პირობის გამოცხადებისას პირობას დაუწერთ წინ არა ოპერატორს
Console.log(!sunnyMorning && !rainingDay)
პირობა განისაზღვრება როგორც არა მზიანი დღე და არა წვიმიანი დღე.
და ამ შემთხვევაში პირობა იქნება false რადგან ცვლადში ჩვენ ეს ორი პირობა
 განვსაზღვრეთ როგორც true.
 
თუ არ გამოვიყენებთ ამავე განცხადებაში არა ოპერატორს 

console.log(sunnyMorning && rainingDay)

მაშინ დათი დაკავშირებული პირობები იქნება true.*/


// 7 როგორ მუშაობს switch (case და default)? /



// 8 ახსენით რა არის და რისთვის გამოიყენება მონაცემთა სტრუქტურები (data structures)?/;


/*მონაცემთა სტრუქტურა წარმოადგენს სხვადასხვა მონაცემთა ერთობლიობას  , რომელიც დაკავშირებულია
 ერთმანეთთან და განსაზღვრავს სხვადასხვა ფუნციებს .
მონაცემთაა სტრუ არის  array ც სადაც თავს იყრის სხვადასხვაა მონაცემები სადაც შეგვიძლია ამოვაკლოთ ,
ჩავამატოთ და მასივებში  მივწვდეთ ჩვენთვის სასურველ .*/


// 9 რა არის მასივი (array)?/

/* 
მასივიი არის ცვლადიი სადაც შეგვიძლია შევინახოთ ერთზე მეტი მნიშვნელობა მასივი განიშაზღვრება [ ] 
ოთხკუთხედი პრჩხილები რომელშიც ინახება მნიშვნელობები , მნიშვნელობები ერთმანეტისგან მძიმეებითა გამოყოპილი .
 მასივები შეგვიძლია წარმოვიდგინოთ როგორც სია ნებისმიერი რამის სია მანქანების ,ხილის ,სახელების ,გვაარების .



მაგ  მასივის შექმნა  აინტაქსი 

const firstName = [ "lukas", "dol", "jon", "stefan"]
*/


//10 როგორ ხდება მასივის მანიპულირება [წვდომა, წაშლა, ჩამატება, შეცვლა]?/;


//წვდომა

/*მასივის ელემენტს შეგვიძლია მივწვდეთ ინდექსის ნომერი . პროგრამირებაში
 ინდექსის ნომრის ათვლა იწყება 0 დან 0 არის პირველი ელემენტ შემდეგ 1 , 2 ,3 ,4 .......


მაგ  ელემენტზე წვდომა

const firstName = [ "lukas", "dol", "jon", "stefan"]

Console.log(firstName[1])


ასე შეგვიძლია მივწვდეთ მასივის ელემენტს "dol" რადგან იგი 0 ის შემდეგ მეორე */


//ჩამატება - push

/* მასივში ახალი ელემენტის ჩამატება შეგვიძლია push სასშუალებით push 
ამატებს ელემენტსს ბოლოდან .

მაგ 

 fierstName.push =("lile") 
 
ამ მაგალითით ჩვენს უკვე შექმნილ მასივს ვაამატებტ კიდევ 1 ელლემენტს ასევე შეგვიძლია
 ჩავამატოთ რამდენიმე ელემენტი 
მაგ   fierstName.push =("lile" , "vano") 
 */

//შეცვლა 
/* 
მაგ 

fierstName [0] = "luarsab"

ამ მაგალითის მიხედვით ლუარსაბით ჩანაცვლდება  პირველი ელემენტი 
ანუ 0 რადგან ნული არის მასივის პირველი ელემენტი

*/

// წაშლა


//რა არის ციკლი?/
/* ციკლი არის კოდის ის მონაკვეთი რაც რამდენჯერმე მეორდება .
 */

//რა არის იტერაცია იგივე ბიჯი?/;



//როგორ მუშაობს for ციკლი?/;

/* 
For  ციკლი გვეხმარება რომ ერთი და იგივე ციკლი  გავამეოროთ რამდენჯერაც დაგვჭირდება , 
მასივების შექმნისას როდესაც გვჭირდება ბევრიი მასივის შექმნა შეგვიძლია გამოვიყენოთ for ციკლი
 და  ერთი კოდდის ბლოკით გამოვაცხადოთ მასივი .
*/




//როგორ მუშაობს while ციკლი?/
/* Waile ციკლიი მუშობს მანამ სანამ რაღაც  ჭეშმარიტია  .

მაგალითად

Const isSnow = true 

Waile(isSnouw) {

Console.log(  " fifqebis cvena" ).   

}

ამ მაგალითში waile ციკლისთვის  სანამ პირობა თოვს ჭეშმარიტია 
მანამ კონსოლში გამომიტანე თოვლის ფიფქები

Waile ციკლი შეგვიძლია შევაჩეროთ  breack ით მაგალითი რომ 
წარმოვიდგინოთ ამისთვის დაგვჭირდება კიდევ ერთი ცვლადი

მაგალითად 
Let isSunny 
Waile(isSnouw) {

Console.log(  " fifqebis cvena" ).   
If  (isSanny) {
  breaqck
} 
 }
ამ ციკლის მეშვეობით waile ციკლი შეჩრდება

*/

//როგორ მუშაობს do while ციკლი?/;


//Do while  განსაზღვრავს კოდის ბლოკს, რომელიც უნდა შესრულდეს ერთხელ და 
//განმეორდეს მანამ, სანამ პირობა არის true.


//რა სხვაობაა [break -ს და continue -ს] შორის?/;

/* Break ის შემთხვევაში  js კოდს წაიკითხავს მანამ სანამ ციკლში ბრეიქი არ შეხვდება 
ხოლო ბრეის სადაც წაიკითხავს იქ გაჩერდება ციკლი waile ის შემთხვევაში ვიყენებთ ბრეიქს რომ 
შევაჩროთ ვაილ ციკლი.ანუ ბრეიქი ნიშნავს ციკლიდან გამოსვლას 

Continue შემთხვევაში js წაიკითხავს კოდს და კვლავ აბრუნდება უკან და წაიკითხავს კვლავ  . */


